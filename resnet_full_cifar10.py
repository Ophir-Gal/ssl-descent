# -*- coding: utf-8 -*-
"""Resnet_Full_CIFAR10

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MnKg-EW7K410GxNk-I8ibQExcN1mpmcb
"""

!nvidia-smi

# Mount google drive
from google.colab import drive
drive.mount('/content/drive')

import os

import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms

class PreActBlock(nn.Module):
    '''Pre-activation version of the BasicBlock.'''
    expansion = 1

    def __init__(self, in_planes, planes, stride=1, **kwargs):
        super(PreActBlock, self).__init__()
        self.bn1 = nn.BatchNorm2d(in_planes)
        self.conv1 = nn.Conv2d(
            in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3,
                               stride=1, padding=1, bias=False)

        if stride != 1 or in_planes != self.expansion*planes:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_planes, self.expansion*planes,
                          kernel_size=1, stride=stride, bias=False)
            )

    def forward(self, x):
        out = F.relu(self.bn1(x))
        shortcut = self.shortcut(out) if hasattr(self, 'shortcut') else x
        out = self.conv1(out)
        out = self.conv2(F.relu(self.bn2(out)))
        out += shortcut
        return out

class PreActResNet(nn.Module):
    def __init__(self, block, num_blocks, num_classes=10, init_channels=64):
        super(PreActResNet, self).__init__()
        self.in_planes = init_channels
        c = init_channels

        self.conv1 = nn.Conv2d(3, c, kernel_size=3,
                               stride=1, padding=1, bias=False)
        self.layer1 = self._make_layer(block, c, num_blocks[0], stride=1)
        self.layer2 = self._make_layer(block, 2*c, num_blocks[1], stride=2)
        self.layer3 = self._make_layer(block, 4*c, num_blocks[2], stride=2)
        self.layer4 = self._make_layer(block, 8*c, num_blocks[3], stride=2)
        self.linear = nn.Linear(8*c*block.expansion, num_classes)

    def _make_layer(self, block, planes, num_blocks, stride):
        # eg: [2, 1, 1, ..., 1]. Only the first one downsamples.
        strides = [stride] + [1]*(num_blocks-1)
        layers = []
        for stride in strides:
            layers.append(block(self.in_planes, planes, stride))
            self.in_planes = planes * block.expansion
        return nn.Sequential(*layers)

    def forward(self, x):
        out = self.conv1(x)
        out = self.layer1(out)
        out = self.layer2(out)
        out = self.layer3(out)
        out = self.layer4(out)
        out = F.avg_pool2d(out, 4)
        out = out.view(out.size(0), -1)
        out = self.linear(out)
        return out

def make_resnet18k(k=64, num_classes=10) -> PreActResNet:
    ''' Returns a ResNet18 with width parameter k. (k=64 is standard ResNet18)'''
    return PreActResNet(PreActBlock, [2, 2, 2, 2], num_classes=num_classes, init_channels=k)

device = 'cuda' if torch.cuda.is_available() else 'cpu'
best_acc = 0  # best test accuracy
start_epoch = 0  # start from epoch 0 or last checkpoint epoch

# Data
print('==> Preparing data..')
transform_train = transforms.Compose([
    transforms.RandomCrop(32, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
])

transform_test = transforms.Compose([
    transforms.ToTensor(),
])

trainset = torchvision.datasets.CIFAR10(
    root='./data', train=True, download=True, transform=transform_train)
## 20% label noise to train set
## Comment out below to turn off label noise
num_samples = len(trainset.targets)
rands = np.random.choice(num_samples, num_samples//5, replace=False)
for rand in rands:
  tmp = trainset.targets[rand]
  trainset.targets[rand] = np.random.choice( list(range(0,tmp)) + list(range(tmp+1,10)) )
## Comment out above to turn off label noise
trainloader = torch.utils.data.DataLoader(
    trainset, batch_size=128, shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(
    root='./data', train=False, download=True, transform=transform_test)
testloader = torch.utils.data.DataLoader(
    testset, batch_size=100, shuffle=False, num_workers=2)

classes = ('plane', 'car', 'bird', 'cat', 'deer',
           'dog', 'frog', 'horse', 'ship', 'truck')

# Model
print('==> Building model..')
net = make_resnet18k(k=1, num_classes=10)
net = net.to(device)
if device == 'cuda':
    net = torch.nn.DataParallel(net)

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(net.parameters(), lr=1e-4)
# optimizer = optim.SGD(net.parameters(), lr=0.1, momentum=0.9) 


# Training
def train(epoch):
    net.train()
    train_loss = 0
    correct = 0
    total = 0
    ## Flooding level
    ## Comment in below to use flooding
    # b = 0.1
    ## Comment in above to use flooding
    for batch_idx, (inputs, targets) in enumerate(trainloader):
        inputs, targets = inputs.to(device), targets.to(device)
        optimizer.zero_grad()
        outputs = net(inputs)
        loss = criterion(outputs, targets)
        ## Comment in below to use flooding
        # loss = (criterion(outputs, targets) - b).abs() + b
        ## Comment in above to use flooding
        loss.backward()
        optimizer.step()

        train_loss += loss.item()
        _, predicted = outputs.max(1)
        total += targets.size(0)
        correct += predicted.eq(targets).sum().item()
    return train_loss/(batch_idx+1), 1-correct/total

def test(epoch):
    net.eval()
    test_loss = 0
    correct = 0
    total = 0
    with torch.no_grad():
        for batch_idx, (inputs, targets) in enumerate(testloader):
            inputs, targets = inputs.to(device), targets.to(device)
            outputs = net(inputs)
            loss = criterion(outputs, targets)

            test_loss += loss.item()
            _, predicted = outputs.max(1)
            total += targets.size(0)
            correct += predicted.eq(targets).sum().item()
        return test_loss/(batch_idx+1), 1-correct/total

with open('/content/drive/My Drive/log_01.txt', 'w') as f:  
      f.write('Epoch,Train Loss,Train Error,Test Loss,Test Error\n')

for epoch in range(start_epoch+1, start_epoch+501):
    train_loss, train_error = train(epoch)
    test_loss, test_error = test(epoch)
    print(f'Epoch: {epoch:03} | Train Loss: {train_loss:.04} | \
Train Error: {train_error:.04} | Test Loss: {test_loss:.04} | \
Test Error: {test_error:.04}')
    with open('/content/drive/My Drive/log_01.txt', 'a') as f:
      f.write(f'{epoch},{train_loss:.09},{train_error:.09},{test_loss:.09},{test_error:.09}\n')

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
sns.set()


dfs = [
    pd.read_csv("/content/drive/My Drive/full cifar10/log_01.txt"), 
    pd.read_csv("/content/drive/My Drive/full cifar10/log_02.txt"),
    pd.read_csv("/content/drive/My Drive/full cifar10/log_04.txt"),
    pd.read_csv("/content/drive/My Drive/full cifar10/log_08.txt"),
    pd.read_csv("/content/drive/My Drive/full cifar10/log_16.txt"),
    pd.read_csv("/content/drive/My Drive/full cifar10/log_32.txt"),
    pd.read_csv("/content/drive/My Drive/full cifar10/log_64.txt"),
]
#print(dfs)
print(len(dfs[0]["Train Error"].values))
def make_array(key):
    ddd = np.zeros((500, 64))
    for i in range(1,65):
        a = int(np.log2(i)//1)
        if a == 6:
            ddd[:,i-1] = dfs[a][key].values
        else:
            b = a + 1
            ddd[:,i-1] = ((2**b-i)*dfs[a][key].values + (i-2**a)*dfs[b][key].values) / (2**b-2**a)
    return ddd

ddd_train_error = make_array("Train Error")
ddd_test_error = make_array("Test Error")

fig = plt.figure(figsize=(15,5))
y_idx = [*range(0,500,1)]
ax1 = fig.add_subplot(1, 2, 1)
im1 = ax1.imshow(np.flipud(ddd_test_error[y_idx, :]), cmap='plasma', aspect=0.25)
ax1.set_xlabel("Model width")
ax1.set_ylabel("Epochs")
ax1.set_xticks([0, 14, 29, 44, 59])
ax1.set_xticklabels([1, 15, 30, 45, 60,])
ax1.set_yticks([0, 74, 148, 199])
ax1.set_yticklabels([500, 100, 10, 1,])
ax1.set_title("Test Error")
ax1.grid(False)
fig.colorbar(im1, ax=ax1)

ax2 = fig.add_subplot(1, 2, 2)
im2 = ax2.imshow(np.flipud(ddd_train_error[y_idx, :]), cmap='plasma', aspect=0.25)
ax2.set_xlabel("Model width")
ax2.set_ylabel("Epochs")
ax2.set_xticks([0, 14, 29, 44, 59])
ax2.set_xticklabels([1, 15, 30, 45, 60,])
ax2.set_yticks([0, 74, 148, 199])
ax2.set_yticklabels([500, 100, 10, 1,])
ax2.set_title("Train Error")
ax2.grid(False)
fig.colorbar(im2, ax=ax2)

plt.show()

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
sns.set()


# loss values in increasing widths taken from the above log files
train_errors = [0.61504, 0.4701, 0.36786, 0.28138, 0.08906, 0.01472, 0.00562]
# test loss values
test_errors = [0.509, 0.3423, 0.2441, 0.26, 0.3115, 0.2492, 0.2269]

widths = [1,2,4,8,16,32,64]

plt.plot(widths, train_errors, marker='d', label='Train Error')
plt.plot(widths, test_errors, marker='d', label='Test Error')
plt.title('Error vs. Width')
plt.ylabel('Error')
plt.xlabel('Width')
plt.legend(loc="upper right")
plt.show()